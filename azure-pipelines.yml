trigger:
- main  # This triggers the pipeline on changes to the main branch

pool:
  vmImage: 'ubuntu-latest'  # Use the latest Ubuntu image

parameters:
- name: SUITE_FILE
  type: string
  default: 'MasterSuite_Regression_Application_SingleLogin.xml'  # Default suite file
  values:
    - MasterSuite_Regression_Application_SingleLogin.xml
    - MasterSuite_Sanity_GuaranteedIssue_MulLogins.xml
    - MasterSuite_Sanity_GuaranteedIssue_QuadRun.xml
    - MasterSuite_Sanity_GuaranteedIssue_SingleLogin.xml
    - MasterSuite_Sanity_MulLogins.xml
    - MasterSuite_Sanity_QuadRun.xml
    - MasterSuite_Sanity_SingleLogin.xml
    - Regression_AccountBalanceHistory.xml
    - Regression_AccountBalanceReport.xml
    - Regression_ActivityReports.xml
    - Regression_AllModules.xml
    - Regression_ApplicationModule.xml
    - Regression_ApplicationPaymentStatusReport.xml
    - Regression_CheckReport.xml
    - Regression_CheckReportHistory.xml
    - Regression_GuaranteedIssue.xml
    - Regression_OtherModules.xml
    - Regression_PaymentRefusedReport.xml
    - Regression_RenewalPremiumReports.xml
    - Regression_ReportModules.xml
    - Regression_StandardToGuaranteed.xml
    - Regression_StatusReport.xml
    - Sanity_ApplicationModule.xml
    - Sanity_GuaranteedIssue.xml
    - Sanity_StandardToGuaranteed.xml

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: MavenBuild
    displayName: 'Maven Build and Test'
    steps:
    - checkout: self  # Check out the source code

    - task: JavaToolInstaller@0  # Install Java
      inputs:
        versionSpec: '17'  # Specify Java version
        jdkArchitectureOption: 'x64'  # Choose the architecture (x64 is common)
        jdkSourceOption: 'PreInstalled'  # Choose PreInstalled or Install from a source

    - task: MavenAuthenticate@0  # Optional: Authenticate if using private Maven repositories
      inputs:
        mavenAuthenticate: true
        
    - script: |
        echo "Selected Suite File: $(SUITE_FILE)"  # Print the selected suite file
        echo "Verifying if the suite file exists..."
        if [ -f src/test/resources/suites/citizens/$(SUITE_FILE) ]; then
          echo "Suite file exists."
        else
          echo "Suite file does not exist: src/test/resources/suites/citizens/$(SUITE_FILE)"
          exit 1  # Fail the job if the file does not exist
        fi
      displayName: 'Check Suite File'

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'  # Path to your pom.xml
        goals: 'clean test'  # Maven goals to execute
        options: '-DsuiteXmlFile=src/test/resources/suites/citizens/$(SUITE_FILE)'  # Pass the suite file
        publishJUnitResults: true  # Publish test results to Azure DevOps
        testResultsFiles: '**/target/surefire-reports/*.xml'  # Path to the test results
        codeCoverageToolOption: 'None'  # Specify code coverage tool if needed

    - script: |
        echo "Running additional scripts or commands..."
        if [ -f ./your_script.sh ]; then
          chmod +x ./your_script.sh  # Make sure your script is executable
          ./your_script.sh  # Run the additional script
        else
          echo "your_script.sh not found!"  # Inform if the script doesn't exist
          exit 1  # Fail the job if the script is missing
        fi
      displayName: 'Run Additional Shell Script'
